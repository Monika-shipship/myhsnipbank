snippet lm "inline Math" iwA
$${1}$
endsnippet

snippet dm "display Math" iwA
$ ${1} $
endsnippet

snippet solev "标准解题模板环境" iwA
== 原书${1:5.1}
#figure(
  image(``rv = '"'``image-${2:1}.png``rv = '"'``,width:100%), 
)
#blockquote[
  ${3}
]
endsnippet




snippet coltwo "横向分为两栏，右边引用图片" iwA
#grid(
  columns: (70%, 1fr),  // 第一列30%宽度，第二列自动填充剩余空间
  gutter: 1em,          // 列间距
    [     // 第二列放置文字
      ${1:示例文字}
    ],
    [
      #figure(
      image(``rv = '"'``../figures/${2:prob1.svg}``rv = '"'``,width:100%), 
      caption: ``rv = '"'``{3:示意图}``rv = '"'``
      ),
      #figure(
      image(``rv = '"'``../figures/${4:prob1.svg}``rv = '"'``,width:100%), 
      caption: ``rv = '"'``{5:示意图}``rv = '"'``
      )
    ]
  )
endsnippet

snippet figim "引用图片" iwA
#figure(
  image(``rv = '"'``image-${2:1}.png``rv = '"'``,width:100%), 
)
endsnippet

snippet eblq "blockquote envirenment" iwA
#blockquote[${1}]
endsnippet

snippet eans "答案环境" iwA
#answer(``rv = '"'``答案``rv = '"'``)[${1}]
endsnippet

snippet eprob "问题环境" iwA
#problem(``rv = '"'``问题``rv = '"'``)[${1}]
endsnippet

snippet edef "定义环境" iwA
#definition(``rv = '"'``定义``rv = '"'``)[${1}]
endsnippet

snippet eeg "示例环境" iwA
#example(``rv = '"'``示例``rv = '"'``)[${1}]
endsnippet

snippet etip "提示环境" iwA
#tip(``rv = '"'``提示``rv = '"'``)[${1}]
endsnippet

snippet eatt "注意环境" iwA
#attention(``rv = '"'``注意``rv = '"'``)[${1}]
endsnippet

snippet equo "引用环境" iwA
#quote(``rv = '"'``引用``rv = '"'``)[${1}]
endsnippet

snippet ethe "定理环境" iwA
#theorem(``rv = '"'``定理``rv = '"'``)[${1}]
endsnippet

snippet eprop "命题环境" iwA
#proposition(``rv = '"'``命题``rv = '"'``)[${1}]
endsnippet


snippet pri "'prime" iwm
^prime
endsnippet

snippet txt "text" iAm
#text[${1}]
endsnippet



snippet pp "parenthesis" iAm
(${1})
endsnippet

snippet lim "limit" iAm
lim_(${1:n} -> ${2:+oo} )
endsnippet

snippet dint "integrall" iAm
integral_(${1:a})^(${2:b}) ${3:f(x)} dd(${4:x})
endsnippet

snippet sum "sum_?^?" iAm
sum_(${1:n})^(${2:+oo})
endsnippet

snippet derive "derive" iAm
derive(${1:f}, ${2:x})
endsnippet

snippet part "partial" iAm
(diff ${1:f})/(diff ${3:x})
endsnippet

snippet int "integral" iAm
integral
endsnippet

snippet dd "微分符号dxdy" iAm
dd(${1:x})
endsnippet

snippet dv "微分符号d/dx" iAm
dv(${1:x})
endsnippet

snippet pdv "微分符号" iAm
pdv(${1:x})
endsnippet

snippet sb "subscript" iAm
_(${1:2})
endsnippet

snippet sr "square" iAm
^2
endsnippet

snippet sqrt "sqrt()" iAm
sqrt( ${1:} )
endsnippet

snippet tp "to the ... power" iAm
^(${1:3})
endsnippet

snippet veps "epsilon.alt" iAm
epsilon.alt
endsnippet

snippet ;; "\;" iAm
\;
endsnippet

snippet ,, "\," iAm
\,
endsnippet

snippet `([A-Za-z\)])(\d)` "auto subscript" iAm
`` rv = m[1] + "_" + m[2]``
endsnippet

snippet `([A-Za-z\)])_(\d{2})` "auto subscript" iAm
`` rv = m[1] + "_(" + m[2] + ")" ``
endsnippet

snippet `(?<![A-Za-z])([A-Za-hk-z])([acdijkmnpqrstABCDIJKMNPQRST])\2` "auto subscript" im
`` rv = m[1] + "_" + m[2] ``
endsnippet

# Custom: Add more greek letters

snippet `(\)|mu|alpha|sigma|rho|beta|gamma|delta|zeta|eta|varepsilon|epsilon|theta|iota|kappa|vartheta|lambda|nu|pi|rho|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)([acdijkmnpqrstABCDIJKMNPQRST])\2` "auto subscript for greek letter" im
`` rv = m[1] + "_" + m[2].substring(0, 1) ``
endsnippet

snippet `(?<![A-Za-z])([A-Za-hk-z01])(grave|acute|hat|tilde|macron|breve|dot|ddot|dddot|ddddot|diaer|circle|caron|vec|upright|italic|b|sans|frak|mono|bb|cal|ov)` "hat" iAm
``
const map = { "ddot": "dot.double", "dddot": "dot.triple", "ddddot": "dot.quad", "vec": "arrow", "b": "bold", "ov": "overline" }
rv = (map[m[2]] || m[2]) + "(" + m[1] + ")"
``
endsnippet

snippet `(mu|alpha|sigma|rho|beta|gamma|delta|zeta|eta|varepsilon|epsilon|theta|iota|kappa|vartheta|lambda|nu|pi|rho|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)(grave|acute|hat|tilde|macron|breve|dot|ddot|dddot|ddddot|diaer|circle|caron|vec|upright|italic|b|sans|frak|mono|bb|cal|ov)` "hat" iAm
``
const map = { "ddot": "dot.double", "dddot": "dot.triple", "ddddot": "dot.quad", "vec": "arrow", "b": "bold", "ov": "overline" }
rv = (map[m[2]] || m[2]) + "(" + m[1] + ")"
``
endsnippet

snippet `((grave|acute|hat|tilde|macron|breve|dot|dot\.double|dot\.triple|dot\.quad|diaer|circle|acute\.double|caron|arrow|arrow\.l|upright|italic|bold|sans|frak|mono|bb|cal)\([a-zA-Z\d]+\))(grave|acute|hat|tilde|macron|breve|dot|ddot|dddot|ddddot|diaer|circle|caron|vec|upright|italic|b|sans|frak|mono|bb|cal|ov)` "hat" iAm
``
const map = { "ddot": "dot.double", "dddot": "dot.triple", "ddddot": "dot.quad", "vec": "arrow", "b": "bold", "ov": "overline" }
rv = (map[m[3]] || m[3]) + "(" + m[1] + ")"
``
endsnippet

snippet `(?<!\.)alt` "alt" iAm
.alt
endsnippet

snippet invs "inverse" iAm
^(-1)
endsnippet
